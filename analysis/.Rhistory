# Load data
cli <- read.csv('cost-of-living_v2.csv')
View(cli)
PCA.data <- cli
row.names(PCA.data) <- PCA.data$city
PCA.data <- subset(PCA.data, select=-c(city, country))
row.names(PCA.data) <- PCA.data$city
PCA.data <- subset(PCA.data, select=-c(city, country))
View(PCA.data)
PCA.data <- cli
row.names(PCA.data) <- PCA.data$city
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country)
View(PCA.data)
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(cli, scale=TRUE)
View(PCA.data)
complete.cases(cli)
sum(complete.cases(cli) == 1)
sum(complete.cases(cli) == TRUE)
PCA.data <- cli[complete.cases(cli), ]
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(cli, scale=TRUE)
View(PCA.data)
PCA.1 <- prcomp(PCA.data, scale=TRUE)
s_plot(PCA.1)
# Function for plotting on GG plot. Takes in data and PCs(int) to plot
pca.gg <- function(d, n1, n2) {
# Variation
p.var <- d$sdev^2
p.var.per <- round(p.var / sum(p.var)*100, 1)
ggD <- data.frame(Sample=rownames(d$x),
X=d$x[,n1],
Y=d$x[,n2],
)
ggplot(data=ggD, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC", n1, p.var.per[n1], "%", sep = " ")) +
ylab(paste("PC", n2, p.var.per[n2], "%", sep=" ")) +
ggtitle("PCA Graph")
}
# Loading scores
load_scores <- function(d, n) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
top_5 <- names(c_ranked[1:5])
return(d$rotation[top_5, 1])
}
# Scree plot
s_plot <- function(d){
pca.var <- d$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Screeplot", xlab="Principal Component",
ylab="% variation")
}
PCA.data <- cli[complete.cases(cli), ]
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(PCA.data, scale=TRUE)
s_plot(PCA.1)
PCA.1 <- prcomp(PCA.data, scale=TRUE, rank = 20)
s_plot(PCA.1)
PCA.1 <- prcomp(PCA.data, scale=TRUE, rank = 10)
s_plot(PCA.1)
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 10)
s_plot(PCA.1)
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 1)
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 0)
s_plot(PCA.1)
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 0.1)
s_plot(PCA.1)
pca.gg(PCA.1, 1, 2)
data.frame(Sample=rownames(PCA.1$x), X=PCA.1$x[, 1], Y=PCA.1$x[, 2])
# Function for plotting on GG plot. Takes in data and PCs(int) to plot
pca.gg <- function(d, n1, n2) {
# Variation
p.var <- d$sdev^2
p.var.per <- round(p.var / sum(p.var)*100, 1)
ggD <- data.frame(Sample=rownames(d$x), X=d$x[,n1], Y=d$x[,n2])
ggplot(data=ggD, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC", n1, p.var.per[n1], "%", sep = " ")) +
ylab(paste("PC", n2, p.var.per[n2], "%", sep=" ")) +
ggtitle("PCA Graph")
}
# Loading scores
load_scores <- function(d, n) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
top_5 <- names(c_ranked[1:5])
return(d$rotation[top_5, 1])
}
# Scree plot
s_plot <- function(d){
pca.var <- d$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Screeplot", xlab="Principal Component",
ylab="% variation")
}
PCA.data <- cli[complete.cases(cli), ]
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 0.1)
s_plot(PCA.1)
pca.gg(PCA.1, 1, 2)
load_scores(PCA1, 1)
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1)
# Which variables were most influential on where the companies were plotted for PC2 (y-axis?)
load_scores(PCA.1, 2)
load_scores(PCA.1, 3)
# Sandboxin'
loading_scores <- PCA.1$rotation[, 1]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
summary(c_ranked)
c_ranked[1:5]
data.frame(c_ranked[1:5])
test <- c_ranked[1:5]
test <- data.frame(c_ranked[1:5])
View(test)
test$Description <- Description[names(test), 'Description']
test$Description <- Descriptions[names(test), 'Description']
descriptions <- read.csv('Descriptions.csv')
descriptions <- descriptions[, c('Column', 'Description')]
test$Description <- descriptions[names(test), 'Description']
View(test)
descriptions[names(test), 'Description']
names(test)
test <- data.frame(c_ranked[1:5])
row.names(test)
test$Description <- descriptions[row.names(test), 'Description']
loading_scores <- PCA.1$rotation[, 1]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Description <- descriptions[row.names(test), 'Description']
test
test
View(test)
test$Description <- descriptions[row.names(test), 'Description']
View(PCA.data)
descriptions[row.names(test), 'Description']
test$Description <- descriptions[row.names(test)[1], 'Description']
descriptions[row.names(test)[1], 'Description']
row.names(test)[1]
test$Description <- descriptions['Description', row.names(test)]
View(descriptions)
test$Description <- descriptions[Column = row.names(test), descriptions]
test$Description <- descriptions[Column == row.names(test), descriptions]
library(dplyr)
test <- data.frame(c_ranked[1:5])
test$name <- row.names(test)
left_join(test, descriptions, by=join_by(row.names(test) == "Description"))
left_join(test, descriptions, by=join_by("name" == "Description"))
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(ggplot2)
library(prc)
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(ggplot2)
library(dplyr)
# Load data
cli <- read.csv('cost-of-living_v2.csv')
dim(cli)
varData <- setNames(stack(sapply(cli, class))[2:1], c('variable', 'class'))
descriptions <- read.csv('Descriptions.csv')
descriptions <- descriptions[, c('Column', 'Description')]
gt::gt(descriptions)
# Function for plotting on GG plot. Takes in data and PCs(int) to plot
pca.gg <- function(d, n1, n2) {
# Variation
p.var <- d$sdev^2
p.var.per <- round(p.var / sum(p.var)*100, 1)
ggD <- data.frame(Sample=rownames(d$x), X=d$x[,n1], Y=d$x[,n2])
ggplot(data=ggD, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC", n1, p.var.per[n1], "%", sep = " ")) +
ylab(paste("PC", n2, p.var.per[n2], "%", sep=" ")) +
ggtitle("PCA Graph")
}
# Loading scores
load_scores <- function(d, n) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
top_5 <- names(c_ranked[1:5])
return(d$rotation[top_5, 1])
}
# Scree plot
s_plot <- function(d){
pca.var <- d$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Screeplot", xlab="Principal Component",
ylab="% variation")
}
PCA.data <- cli[complete.cases(cli), ]
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 0.1)
s_plot(PCA.1)
pca.gg(PCA.1, 1, 2)
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1)
# Which variables were most influential on where the companies were plotted for PC2 (y-axis?)
load_scores(PCA.1, 2)
load_scores(PCA.1, 3)
# Sandboxin'
loading_scores <- PCA.1$rotation[, 1]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$name <- row.names(test)
left_join(test, descriptions, by=join_by("name" == "Description"))
loading_scores <- PCA.1$rotation[, 1]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Column <- row.names(test)
left_join(test, descriptions, by="Column")
left_join(test, descriptions, by=Column)
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1)
# Loading scores
load_scores <- function(d, n) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Column <- row.names(test)
return(left_join(test, descriptions, by=Column))
}
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1)
# Loading scores
load_scores <- function(d, n) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Column <- row.names(test)
return(left_join(test, descriptions, by="Column"))
}
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1)
# Which variables were most influential on where the companies were plotted for PC2 (y-axis?)
load_scores(PCA.1, 2)
load_scores(PCA.1, 3)
PCA.data2 <- t(data.matrix(PCA.data))
PCA@ <- prcomp(PCA.data2)
PCA.2 <- prcomp(PCA.data2)
s_plot(PCA.2)
# Graph
pca.gg(PCA2, 1, 2)
# Graph
pca.gg(PCA.2, 1, 2)
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Column <- row.names(test)
if (onCols) {
return(left_join(test, descriptions, by="Column"))
} else {
return(test)
}
}
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA2, 1)
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA.2, 1)
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA.2, 1, FALSE)
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
if (onCols) {
test$Column <- row.names(test)
return(left_join(test, descriptions, by="Column"))
} else {
return(test)
}
}
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
if (onCols) {
test$Column <- row.names(test)
return(left_join(test, descriptions, by="Column"))
} else {
return(gt::gt(test))
}
}
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA.2, 1, FALSE)
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Column <- row.names(test)
if (onCols) {
return(left_join(test, descriptions, by="Column"))
} else {
return(gt::gt(test))
}
}
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA.2, 1, FALSE)
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:5])
test$Column <- row.names(test)
if (onCols) {
test <- left_join(test, descriptions, by="Column")
return(gt::gt(test))
} else {
return(gt::gt(test))
}
}
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1, TRUE)
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:10])
print(colnames(test))
test$Column <- row.names(test)
if (onCols) {
test <- left_join(test, descriptions, by="Column")
return(gt::gt(test))
} else {
return(gt::gt(test))
}
}
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1, TRUE)
colnames(test) <- "Quantity"
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:10])
colnames(test) <- "Quantity"
test$Column <- row.names(test)
if (onCols) {
test <- left_join(test, descriptions, by="Column")
return(gt::gt(test))
} else {
return(gt::gt(test))
}
}
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1, TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(ggplot2)
library(dplyr)
# Load data
cli <- read.csv('cost-of-living_v2.csv')
dim(cli)
varData <- setNames(stack(sapply(cli, class))[2:1], c('variable', 'class'))
descriptions <- read.csv('Descriptions.csv')
descriptions <- descriptions[, c('Column', 'Description')]
gt::gt(descriptions)
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(ggplot2)
library(dplyr)
# Load data
cli <- read.csv('cost-of-living_v2.csv')
dim(cli)
varData <- setNames(stack(sapply(cli, class))[2:1], c('variable', 'class'))
descriptions <- read.csv('Descriptions.csv')
descriptions <- descriptions[, c('Column', 'Description')]
gt::gt(descriptions)
# Function for plotting on GG plot. Takes in data and PCs(int) to plot
pca.gg <- function(d, n1, n2) {
# Variation
p.var <- d$sdev^2
p.var.per <- round(p.var / sum(p.var)*100, 1)
ggD <- data.frame(Sample=rownames(d$x), X=d$x[,n1], Y=d$x[,n2])
ggplot(data=ggD, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC", n1, p.var.per[n1], "%", sep = " ")) +
ylab(paste("PC", n2, p.var.per[n2], "%", sep=" ")) +
ggtitle("PCA Graph")
}
# Loading scores
load_scores <- function(d, n, onCols) {
loading_scores <- d$rotation[, n]
col_scores <- abs(loading_scores)
c_ranked <- sort(col_scores, decreasing = TRUE)
test <- data.frame(c_ranked[1:10])
colnames(test) <- "Loading Score"
test$Column <- row.names(test)
if (onCols) {
test <- left_join(test, descriptions, by="Column")
return(gt::gt(test))
} else {
return(gt::gt(test))
}
}
# Scree plot
s_plot <- function(d){
pca.var <- d$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Screeplot", xlab="Principal Component",
ylab="% variation")
}
PCA.data <- cli[complete.cases(cli), ]
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 0.1)
s_plot(PCA.1)
pca.gg(PCA.1, 1, 2)
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1, TRUE)
# Which variables were most influential on where the companies were plotted for PC2 (y-axis?)
load_scores(PCA.1, 2, TRUE)
load_scores(PCA.1, 3, TRUE)
PCA.data2 <- t(data.matrix(PCA.data))
PCA.data2 <- t(apply(PCA.data2, 1, function(x)(x-min(x))/(max(x)-min(x))))
PCA.2 <- prcomp(PCA.data2)
s_plot(PCA.2)
# Graph
pca.gg(PCA.2, 1, 2)
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA.2, 1, FALSE)
# PC2?
load_scores(PCA.2, 2, FALSE)
PCA.data <- cli[complete.cases(cli), ]
row.names(PCA.data) <- paste(PCA.data$city, PCA.data$country, sep = ", ")
PCA.data <- subset(PCA.data, select=-c(city, country))
PCA.1 <- prcomp(PCA.data, scale=TRUE, tol = 0.1)
s_plot(PCA.1)
pca.gg(PCA.1, 1, 2)
# Which variables were most influential on where the companies were plotted for PC1 (x-axis?)
load_scores(PCA.1, 1, TRUE)
# Which variables were most influential on where the companies were plotted for PC2 (y-axis?)
load_scores(PCA.1, 2, TRUE)
load_scores(PCA.1, 3, TRUE)
PCA.data2 <- t(data.matrix(PCA.data))
PCA.data2 <- t(apply(PCA.data2, 1, function(x)(x-min(x))/(max(x)-min(x))))
PCA.2 <- prcomp(PCA.data2)
s_plot(PCA.2)
# Graph
pca.gg(PCA.2, 1, 2)
# What companies were most influential on where the variables were plotted for PC1?
load_scores(PCA.2, 1, FALSE)
# PC2?
load_scores(PCA.2, 2, FALSE)
library(yaml)
install.packages(rmarkdown)
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages('yaml')
install.packages('knitr')
install.packages("knitr")
install.packages("knitr")
library(dplyr)
df <- read.csv('../data/4_final_webpage_metadata.csv')
setwd("~/Documents/miele/analysis")
df <- read.csv('../data/4_final_webpage_metadata.csv')
data <- df %>%
group_by(entityid) %>%
last()
data
print(data)
data <- df %>%
group_by(entityid) %>%
last() %>%
as.data.frame()
print(data)
View(data)
View(data)
View(data)
View(df)
View(data)
data <- df %>%
group_by(entityid) %>%
as.data.frame()
df <- read.csv('regdata_r.csv')
View(df)
model <- lm(Failed ~ login, data=df)
View(df)
df <- read.csv('regdata_r.csv')
model <- lm(Failed ~ login, data=df)
model.summary()
summary(model)
summary(model)$r.squared
